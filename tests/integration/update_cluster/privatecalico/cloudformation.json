{
  "Resources": {
    "AWSAutoScalingAutoScalingGroupbastionprivatecalicoexamplecom": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "bastion.privatecalico.example.com",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "AWSEC2LaunchTemplatebastionprivatecalicoexamplecom"
          },
          "Version": {
            "Fn::GetAtt": [
              "AWSEC2LaunchTemplatebastionprivatecalicoexamplecom",
              "LatestVersionNumber"
            ]
          }
        },
        "MaxSize": "1",
        "MinSize": "1",
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetutilityustest1aprivatecalicoexamplecom"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "bastion.privatecalico.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/node",
            "Value": "",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/bastion",
            "Value": "1",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kops.k8s.io/instancegroup",
            "Value": "bastion",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "AWSElasticLoadBalancingLoadBalancerbastionprivatecalicoexamplecom"
          }
        ]
      }
    },
    "AWSAutoScalingAutoScalingGroupmasterustest1amastersprivatecalicoexamplecom": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "master-us-test-1a.masters.privatecalico.example.com",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "AWSEC2LaunchTemplatemasterustest1amastersprivatecalicoexamplecom"
          },
          "Version": {
            "Fn::GetAtt": [
              "AWSEC2LaunchTemplatemasterustest1amastersprivatecalicoexamplecom",
              "LatestVersionNumber"
            ]
          }
        },
        "MaxSize": "1",
        "MinSize": "1",
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetustest1aprivatecalicoexamplecom"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "master-us-test-1a.masters.privatecalico.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/kops-controller-pki",
            "Value": "",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/control-plane",
            "Value": "",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/node.kubernetes.io/exclude-from-external-load-balancers",
            "Value": "",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kops.k8s.io/instancegroup",
            "Value": "master-us-test-1a",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "AWSElasticLoadBalancingLoadBalancerapiprivatecalicoexamplecom"
          }
        ]
      }
    },
    "AWSAutoScalingAutoScalingGroupnodesprivatecalicoexamplecom": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "nodes.privatecalico.example.com",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "AWSEC2LaunchTemplatenodesprivatecalicoexamplecom"
          },
          "Version": {
            "Fn::GetAtt": [
              "AWSEC2LaunchTemplatenodesprivatecalicoexamplecom",
              "LatestVersionNumber"
            ]
          }
        },
        "MaxSize": "2",
        "MinSize": "2",
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetustest1aprivatecalicoexamplecom"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "nodes.privatecalico.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/node",
            "Value": "",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/node",
            "Value": "1",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kops.k8s.io/instancegroup",
            "Value": "nodes",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      }
    },
    "AWSEC2DHCPOptionsprivatecalicoexamplecom": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "us-test-1.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2EIPustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2InternetGatewayprivatecalicoexamplecom": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2LaunchTemplatebastionprivatecalicoexamplecom": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": "bastion.privatecalico.example.com",
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "VolumeType": "gp3",
                "VolumeSize": 32,
                "Iops": 3000,
                "Throughput": 125,
                "DeleteOnTermination": true,
                "Encrypted": true
              }
            }
          ],
          "IamInstanceProfile": {
            "Name": {
              "Ref": "AWSIAMInstanceProfilebastionsprivatecalicoexamplecom"
            }
          },
          "ImageId": "ami-12345678",
          "InstanceType": "t3.micro",
          "KeyName": "kubernetes.privatecalico.example.com-c4:a6:ed:9a:a8:89:b9:e2:c3:9c:d6:63:eb:9c:71:57",
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 1,
            "HttpTokens": "optional"
          },
          "Monitoring": {
            "Enabled": false
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": true,
              "DeleteOnTermination": true,
              "DeviceIndex": 0,
              "Ipv6AddressCount": 0,
              "Groups": [
                {
                  "Ref": "AWSEC2SecurityGroupbastionprivatecalicoexamplecom"
                }
              ]
            }
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "KubernetesCluster",
                  "Value": "privatecalico.example.com"
                },
                {
                  "Key": "Name",
                  "Value": "bastion.privatecalico.example.com"
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/node",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/role/bastion",
                  "Value": "1"
                },
                {
                  "Key": "kops.k8s.io/instancegroup",
                  "Value": "bastion"
                },
                {
                  "Key": "kubernetes.io/cluster/privatecalico.example.com",
                  "Value": "owned"
                }
              ]
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "KubernetesCluster",
                  "Value": "privatecalico.example.com"
                },
                {
                  "Key": "Name",
                  "Value": "bastion.privatecalico.example.com"
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/node",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/role/bastion",
                  "Value": "1"
                },
                {
                  "Key": "kops.k8s.io/instancegroup",
                  "Value": "bastion"
                },
                {
                  "Key": "kubernetes.io/cluster/privatecalico.example.com",
                  "Value": "owned"
                }
              ]
            }
          ],
          "UserData": "extracted"
        }
      }
    },
    "AWSEC2LaunchTemplatemasterustest1amastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": "master-us-test-1a.masters.privatecalico.example.com",
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "VolumeType": "gp3",
                "VolumeSize": 64,
                "Iops": 3000,
                "Throughput": 125,
                "DeleteOnTermination": true,
                "Encrypted": true
              }
            }
          ],
          "IamInstanceProfile": {
            "Name": {
              "Ref": "AWSIAMInstanceProfilemastersprivatecalicoexamplecom"
            }
          },
          "ImageId": "ami-12345678",
          "InstanceType": "t3.medium",
          "KeyName": "kubernetes.privatecalico.example.com-c4:a6:ed:9a:a8:89:b9:e2:c3:9c:d6:63:eb:9c:71:57",
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 1,
            "HttpTokens": "required"
          },
          "Monitoring": {
            "Enabled": false
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": false,
              "DeleteOnTermination": true,
              "DeviceIndex": 0,
              "Ipv6AddressCount": 0,
              "Groups": [
                {
                  "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
                }
              ]
            }
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "KubernetesCluster",
                  "Value": "privatecalico.example.com"
                },
                {
                  "Key": "Name",
                  "Value": "master-us-test-1a.masters.privatecalico.example.com"
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/kops-controller-pki",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/control-plane",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node.kubernetes.io/exclude-from-external-load-balancers",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/role/master",
                  "Value": "1"
                },
                {
                  "Key": "kops.k8s.io/instancegroup",
                  "Value": "master-us-test-1a"
                },
                {
                  "Key": "kubernetes.io/cluster/privatecalico.example.com",
                  "Value": "owned"
                }
              ]
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "KubernetesCluster",
                  "Value": "privatecalico.example.com"
                },
                {
                  "Key": "Name",
                  "Value": "master-us-test-1a.masters.privatecalico.example.com"
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/kops-controller-pki",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/control-plane",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node.kubernetes.io/exclude-from-external-load-balancers",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/role/master",
                  "Value": "1"
                },
                {
                  "Key": "kops.k8s.io/instancegroup",
                  "Value": "master-us-test-1a"
                },
                {
                  "Key": "kubernetes.io/cluster/privatecalico.example.com",
                  "Value": "owned"
                }
              ]
            }
          ],
          "UserData": "extracted"
        }
      }
    },
    "AWSEC2LaunchTemplatenodesprivatecalicoexamplecom": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": "nodes.privatecalico.example.com",
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "VolumeType": "gp3",
                "VolumeSize": 128,
                "Iops": 3000,
                "Throughput": 125,
                "DeleteOnTermination": true,
                "Encrypted": true
              }
            }
          ],
          "IamInstanceProfile": {
            "Name": {
              "Ref": "AWSIAMInstanceProfilenodesprivatecalicoexamplecom"
            }
          },
          "ImageId": "ami-12345678",
          "InstanceType": "t3.medium",
          "KeyName": "kubernetes.privatecalico.example.com-c4:a6:ed:9a:a8:89:b9:e2:c3:9c:d6:63:eb:9c:71:57",
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 3,
            "HttpTokens": "required"
          },
          "Monitoring": {
            "Enabled": false
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": false,
              "DeleteOnTermination": true,
              "DeviceIndex": 0,
              "Ipv6AddressCount": 0,
              "Groups": [
                {
                  "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
                }
              ]
            }
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "KubernetesCluster",
                  "Value": "privatecalico.example.com"
                },
                {
                  "Key": "Name",
                  "Value": "nodes.privatecalico.example.com"
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/node",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/role/node",
                  "Value": "1"
                },
                {
                  "Key": "kops.k8s.io/instancegroup",
                  "Value": "nodes"
                },
                {
                  "Key": "kubernetes.io/cluster/privatecalico.example.com",
                  "Value": "owned"
                }
              ]
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "KubernetesCluster",
                  "Value": "privatecalico.example.com"
                },
                {
                  "Key": "Name",
                  "Value": "nodes.privatecalico.example.com"
                },
                {
                  "Key": "k8s.io/cluster-autoscaler/node-template/label/node-role.kubernetes.io/node",
                  "Value": ""
                },
                {
                  "Key": "k8s.io/role/node",
                  "Value": "1"
                },
                {
                  "Key": "kops.k8s.io/instancegroup",
                  "Value": "nodes"
                },
                {
                  "Key": "kubernetes.io/cluster/privatecalico.example.com",
                  "Value": "owned"
                }
              ]
            }
          ],
          "UserData": "extracted"
        }
      }
    },
    "AWSEC2NatGatewayustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "AWSEC2EIPustest1aprivatecalicoexamplecom",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "AWSEC2Subnetutilityustest1aprivatecalicoexamplecom"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Route0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AWSEC2RouteTableprivatecalicoexamplecom"
        },
        "DestinationIpv6CidrBlock": "::/0",
        "GatewayId": {
          "Ref": "AWSEC2InternetGatewayprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2Route00000": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AWSEC2RouteTableprivatecalicoexamplecom"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AWSEC2InternetGatewayprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2RouteTableprivatecalicoexamplecom": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/kops/role",
            "Value": "public"
          }
        ]
      }
    },
    "AWSEC2RouteTableprivateustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "private-us-test-1a.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/kops/role",
            "Value": "private-us-test-1a"
          }
        ]
      }
    },
    "AWSEC2Routeprivateustest1a00000": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AWSEC2RouteTableprivateustest1aprivatecalicoexamplecom"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "AWSEC2NatGatewayustest1aprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2SecurityGroupEgressfromapielbprivatecalicoexamplecomegressall0to00": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupEgressfromapielbprivatecalicoexamplecomegressall0to000000": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressfrombastionelbprivatecalicoexamplecomegressall0to00": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupEgressfrombastionelbprivatecalicoexamplecomegressall0to000000": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressfrombastionprivatecalicoexamplecomegressall0to00": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupEgressfrombastionprivatecalicoexamplecomegressall0to000000": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressfrommastersprivatecalicoexamplecomegressall0to00": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupEgressfrommastersprivatecalicoexamplecomegressall0to000000": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressfromnodesprivatecalicoexamplecomegressall0to00": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupEgressfromnodesprivatecalicoexamplecomegressall0to000000": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressfrom00000ingresstcp22to22bastionelbprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressfrom00000ingresstcp443to443apielbprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": 443,
        "ToPort": 443,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressfrom0ingresstcp22to22bastionelbprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupIngressfrom0ingresstcp443to443apielbprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": 443,
        "ToPort": 443,
        "IpProtocol": "tcp",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupIngressfrombastionelbprivatecalicoexamplecomingresstcp22to22bastionprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupbastionprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressfrombastionprivatecalicoexamplecomingresstcp22to22mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupbastionprivatecalicoexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressfrombastionprivatecalicoexamplecomingresstcp22to22nodesprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupbastionprivatecalicoexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressfrommastersprivatecalicoexamplecomingressall0to0mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressfrommastersprivatecalicoexamplecomingressall0to0nodesprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressfromnodesprivatecalicoexamplecomingress40to0mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 65535,
        "IpProtocol": "4"
      }
    },
    "AWSEC2SecurityGroupIngressfromnodesprivatecalicoexamplecomingressall0to0nodesprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressfromnodesprivatecalicoexamplecomingresstcp1to2379mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 1,
        "ToPort": 2379,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressfromnodesprivatecalicoexamplecomingresstcp2382to4000mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 2382,
        "ToPort": 4000,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressfromnodesprivatecalicoexamplecomingresstcp4003to65535mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 4003,
        "ToPort": 65535,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressfromnodesprivatecalicoexamplecomingressudp1to65535mastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesprivatecalicoexamplecom"
        },
        "FromPort": 1,
        "ToPort": 65535,
        "IpProtocol": "udp"
      }
    },
    "AWSEC2SecurityGroupIngresshttpselbtomaster": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersprivatecalicoexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": 443,
        "ToPort": 443,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressicmppmtuapielb00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": 3,
        "ToPort": 4,
        "IpProtocol": "icmp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressicmpv6pmtuapielb0": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
        },
        "FromPort": -1,
        "ToPort": -1,
        "IpProtocol": "icmpv6",
        "CidrIpv6": "::/0"
      }
    },
    "AWSEC2SecurityGroupapielbprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "api-elb.privatecalico.example.com",
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "GroupDescription": "Security group for api ELB",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "api-elb.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "bastion-elb.privatecalico.example.com",
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "GroupDescription": "Security group for bastion ELB",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "bastion-elb.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupbastionprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "bastion.privatecalico.example.com",
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "GroupDescription": "Security group for bastion",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "bastion.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupmastersprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "masters.privatecalico.example.com",
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "GroupDescription": "Security group for masters",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "masters.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupnodesprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "nodes.privatecalico.example.com",
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "GroupDescription": "Security group for nodes",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "nodes.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SubnetRouteTableAssociationprivateustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AWSEC2Subnetustest1aprivatecalicoexamplecom"
        },
        "RouteTableId": {
          "Ref": "AWSEC2RouteTableprivateustest1aprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2SubnetRouteTableAssociationutilityustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AWSEC2Subnetutilityustest1aprivatecalicoexamplecom"
        },
        "RouteTableId": {
          "Ref": "AWSEC2RouteTableprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2Subnetustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "CidrBlock": "172.20.32.0/19",
        "AvailabilityZone": "us-test-1a",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.privatecalico.example.com"
          },
          {
            "Key": "SubnetType",
            "Value": "Private"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/role/internal-elb",
            "Value": "1"
          }
        ]
      }
    },
    "AWSEC2Subnetutilityustest1aprivatecalicoexamplecom": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "CidrBlock": "172.20.4.0/22",
        "AvailabilityZone": "us-test-1a",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "utility-us-test-1a.privatecalico.example.com"
          },
          {
            "Key": "SubnetType",
            "Value": "Utility"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          }
        ]
      }
    },
    "AWSEC2VPCCidrBlockAmazonIPv6": {
      "Type": "AWS::EC2::VPCCidrBlock",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "AmazonProvidedIpv6CidrBlock": true
      }
    },
    "AWSEC2VPCDHCPOptionsAssociationprivatecalicoexamplecom": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "DhcpOptionsId": {
          "Ref": "AWSEC2DHCPOptionsprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2VPCGatewayAttachmentprivatecalicoexamplecom": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCprivatecalicoexamplecom"
        },
        "InternetGatewayId": {
          "Ref": "AWSEC2InternetGatewayprivatecalicoexamplecom"
        }
      }
    },
    "AWSEC2VPCprivatecalicoexamplecom": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.20.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumeustest1aetcdeventsprivatecalicoexamplecom": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-test-1a",
        "Size": 20,
        "VolumeType": "gp3",
        "Iops": 3000,
        "Throughput": 125,
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.etcd-events.privatecalico.example.com"
          },
          {
            "Key": "k8s.io/etcd/events",
            "Value": "us-test-1a/us-test-1a"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumeustest1aetcdmainprivatecalicoexamplecom": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-test-1a",
        "Size": 20,
        "VolumeType": "gp3",
        "Iops": 3000,
        "Throughput": 125,
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.etcd-main.privatecalico.example.com"
          },
          {
            "Key": "k8s.io/etcd/main",
            "Value": "us-test-1a/us-test-1a"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSElasticLoadBalancingLoadBalancerapiprivatecalicoexamplecom": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "api-privatecalico-example-0uch4k",
        "Listeners": [
          {
            "InstancePort": "443",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "443",
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupapielbprivatecalicoexamplecom"
          }
        ],
        "Subnets": [
          {
            "Ref": "AWSEC2Subnetutilityustest1aprivatecalicoexamplecom"
          }
        ],
        "HealthCheck": {
          "Target": "SSL:443",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "10",
          "Timeout": "5"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 300
        },
        "ConnectionSettings": {
          "IdleTimeout": 300
        },
        "CrossZone": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "api.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSElasticLoadBalancingLoadBalancerbastionprivatecalicoexamplecom": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "bastion-privatecalico-exa-hocohm",
        "Listeners": [
          {
            "InstancePort": "22",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "22",
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupbastionelbprivatecalicoexamplecom"
          }
        ],
        "Subnets": [
          {
            "Ref": "AWSEC2Subnetutilityustest1aprivatecalicoexamplecom"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:22",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "10",
          "Timeout": "5"
        },
        "ConnectionSettings": {
          "IdleTimeout": 300
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "bastion.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilebastionsprivatecalicoexamplecom": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "bastions.privatecalico.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolebastionsprivatecalicoexamplecom"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilemastersprivatecalicoexamplecom": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "masters.privatecalico.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolemastersprivatecalicoexamplecom"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilenodesprivatecalicoexamplecom": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "nodes.privatecalico.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolenodesprivatecalicoexamplecom"
          }
        ]
      }
    },
    "AWSIAMPolicybastionsprivatecalicoexamplecom": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "bastions.privatecalico.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolebastionsprivatecalicoexamplecom"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeRegions",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMPolicymastersprivatecalicoexamplecom": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "masters.privatecalico.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolemastersprivatecalicoexamplecom"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:AttachVolume",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/KubernetesCluster": "privatecalico.example.com",
                  "aws:ResourceTag/k8s.io/role/master": "1"
                }
              },
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "s3:Get*"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws-test:s3:::placeholder-read-bucket/clusters.example.com/privatecalico.example.com/*"
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:DeleteObjectVersion",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws-test:s3:::placeholder-write-bucket/clusters.example.com/privatecalico.example.com/backups/etcd/main/*"
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:DeleteObjectVersion",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws-test:s3:::placeholder-write-bucket/clusters.example.com/privatecalico.example.com/backups/etcd/events/*"
            },
            {
              "Action": [
                "s3:GetBucketLocation",
                "s3:GetEncryptionConfiguration",
                "s3:ListBucket",
                "s3:ListBucketVersions"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:s3:::placeholder-read-bucket"
              ]
            },
            {
              "Action": [
                "s3:GetBucketLocation",
                "s3:GetEncryptionConfiguration",
                "s3:ListBucket",
                "s3:ListBucketVersions"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:s3:::placeholder-write-bucket"
              ]
            },
            {
              "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:GetHostedZone"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:route53:::hostedzone/Z1AFAKE1ZON3YO"
              ]
            },
            {
              "Action": [
                "route53:GetChange"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:route53:::change/*"
              ]
            },
            {
              "Action": [
                "route53:ListHostedZones",
                "route53:ListTagsForResource"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": "ec2:CreateTags",
              "Condition": {
                "StringEquals": {
                  "aws:RequestTag/KubernetesCluster": "privatecalico.example.com",
                  "ec2:CreateAction": [
                    "CreateVolume",
                    "CreateSnapshot"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:ec2:*:*:volume/*",
                "arn:aws-test:ec2:*:*:snapshot/*"
              ]
            },
            {
              "Action": [
                "ec2:CreateTags",
                "ec2:DeleteTags"
              ],
              "Condition": {
                "Null": {
                  "aws:RequestTag/KubernetesCluster": "true"
                },
                "StringEquals": {
                  "aws:ResourceTag/KubernetesCluster": "privatecalico.example.com"
                }
              },
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:ec2:*:*:volume/*",
                "arn:aws-test:ec2:*:*:snapshot/*"
              ]
            },
            {
              "Action": "ec2:CreateTags",
              "Condition": {
                "StringEquals": {
                  "aws:RequestTag/KubernetesCluster": "privatecalico.example.com",
                  "ec2:CreateAction": [
                    "CreateSecurityGroup"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:ec2:*:*:security-group/*"
              ]
            },
            {
              "Action": [
                "ec2:CreateTags",
                "ec2:DeleteTags"
              ],
              "Condition": {
                "Null": {
                  "aws:RequestTag/KubernetesCluster": "true"
                },
                "StringEquals": {
                  "aws:ResourceTag/KubernetesCluster": "privatecalico.example.com"
                }
              },
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:ec2:*:*:security-group/*"
              ]
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeRegions",
                "ec2:DescribeRouteTables",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes",
                "ec2:DescribeVolumesModifications",
                "ec2:DescribeVpcs",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeRepositories",
                "ecr:GetAuthorizationToken",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:ListImages",
                "elasticloadbalancing:DescribeListeners",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeTargetGroups",
                "elasticloadbalancing:DescribeTargetHealth",
                "iam:GetServerCertificate",
                "iam:ListServerCertificates",
                "kms:DescribeKey",
                "kms:GenerateRandom"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "autoscaling:SetDesiredCapacity",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "ec2:AttachVolume",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteVolume",
                "ec2:DetachVolume",
                "ec2:ModifyInstanceAttribute",
                "ec2:ModifyVolume",
                "ec2:RevokeSecurityGroupIngress",
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                "elasticloadbalancing:AttachLoadBalancerToSubnets",
                "elasticloadbalancing:ConfigureHealthCheck",
                "elasticloadbalancing:CreateLoadBalancerListeners",
                "elasticloadbalancing:CreateLoadBalancerPolicy",
                "elasticloadbalancing:DeleteListener",
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:DeleteLoadBalancerListeners",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                "elasticloadbalancing:ModifyListener",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:ModifyTargetGroup",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/KubernetesCluster": "privatecalico.example.com"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ec2:CreateSecurityGroup",
                "ec2:CreateSnapshot",
                "ec2:CreateVolume",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:CreateTargetGroup"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestTag/KubernetesCluster": "privatecalico.example.com"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "ec2:CreateSecurityGroup",
              "Effect": "Allow",
              "Resource": "arn:aws-test:ec2:*:*:vpc/*"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMPolicynodesprivatecalicoexamplecom": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "nodes.privatecalico.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolenodesprivatecalicoexamplecom"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:s3:::placeholder-read-bucket/clusters.example.com/privatecalico.example.com/addons/*",
                "arn:aws-test:s3:::placeholder-read-bucket/clusters.example.com/privatecalico.example.com/cluster-completed.spec",
                "arn:aws-test:s3:::placeholder-read-bucket/clusters.example.com/privatecalico.example.com/igconfig/node/*",
                "arn:aws-test:s3:::placeholder-read-bucket/clusters.example.com/privatecalico.example.com/secrets/dockerconfig"
              ]
            },
            {
              "Action": [
                "s3:GetBucketLocation",
                "s3:GetEncryptionConfiguration",
                "s3:ListBucket",
                "s3:ListBucketVersions"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws-test:s3:::placeholder-read-bucket"
              ]
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeInstances",
                "ec2:DescribeRegions",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:DescribeRepositories",
                "ecr:GetAuthorizationToken",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:ListImages",
                "iam:GetServerCertificate",
                "iam:ListServerCertificates",
                "kms:GenerateRandom"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMRolebastionsprivatecalicoexamplecom": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "bastions.privatecalico.example.com",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "bastions.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSIAMRolemastersprivatecalicoexamplecom": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "masters.privatecalico.example.com",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "masters.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSIAMRolenodesprivatecalicoexamplecom": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "nodes.privatecalico.example.com",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "privatecalico.example.com"
          },
          {
            "Key": "Name",
            "Value": "nodes.privatecalico.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/privatecalico.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSRoute53RecordSetapiprivatecalicoexamplecom": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": "api.privatecalico.example.com",
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "AWSElasticLoadBalancingLoadBalancerapiprivatecalicoexamplecom",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "AWSElasticLoadBalancingLoadBalancerapiprivatecalicoexamplecom",
              "CanonicalHostedZoneNameID"
            ]
          },
          "EvaluateTargetHealth": false
        },
        "HostedZoneId": "/hostedzone/Z1AFAKE1ZON3YO"
      }
    }
  }
}
